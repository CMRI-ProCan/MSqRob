% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/saves_loads_MSqRob.R
\name{loads_MSqRob}
\alias{loads_MSqRob}
\title{Loading only given variables of a data.frame from binary file}
\usage{
loads_MSqRob(file = NULL, variables = NULL, ultra.fast = FALSE,
  printProgress = FALSE, shiny = FALSE, message = NULL)
}
\arguments{
\item{file}{character string: the (RDatas) filename from which to load the variables. If using \code{ultra.fast = TRUE} option, specify the directory holding the uncompressed R objects (saved via \code{MSqRob_saves(..., ultra.fast = TRUE))}.}

\item{variables}{Optional: a character vector containing the variable names to load. If not specified, all variables will be loaded.}

\item{ultra.fast}{boolean: if \code{TRUE}, ultra fast (...) processing is done without any check to parameters or file existence/permissions. Be sure if using this setting as no debugging is done! Only recommended for servers dealing with lot of R objects' saves and loads in a monitored environment. Also, for performance gain, it is advised not to convert the list to data frame (\code{to.data.frame = FALSE}).}

\item{to.data.frame}{boolean: the default behavior of loads is to concatenate the variables to a list. This could be overriden with \code{TRUE} argument specified at to.data.frame parameter, which will return a dataframe instead of list. Only do this if all your variables have the same number of cases!}
}
\value{
Loaded data.frame.
}
\description{
\code{loads_MSqRob} is almost a pure copy of the \code{loads} function from the \code{saves} package by Daróczi (2013) with some minor code tweaks to make it work for MSqRob. It loads data from a special binary file format (RDatas) made up by the \code{\link{MSqRob_saves}} function. This special, uncompressed tar archive inlcudes several separate RData files (saved by \code{\link{MSqRob_saves}} function) as being columns/variables of a data frame.
}
\details{
The purpose of this function is to be able only a few variables of a data.frame really fast. It is done by reading and writing datas in binary format without any transformations, and combining the speed of only reading the needed part of an archive.

Some minor experiments shows a huge performance gain against using SQLite/MySQL backends or loading whole binary data, but be conscious always choosing the aprropriate method to write and read data.

The author of the \code{saves} package (Daróczi) emphasizes: this package could be useful only in few cases!
}
\examples{
## Not run:
# Loading the 'v1' and 'v5' variables of the demo dataset.
data(evs.2000.hun)
saves(evs.2000.hun)
evs.filtered.list <- loads("evs.2000.hun.RDatas", c('v1', 'v5'))
evs.filtered.df <- loads("evs.2000.hun.RDatas", c('v1', 'v5'), to.data.frame=TRUE)

## End(Not run)
}
\references{
Daróczi, G. (2013). saves: Fast load variables. R package version 0.5, URL http://cran.r-project.org/package=saves
}
\seealso{
Other \code{\link{saves_MSqRob}} to save R objects to RDatas binary format: \code{\link{inspect_loads_MSqRob}}

Other \code{\link{inspect_loads_MSqRob}} to inspect the content of an RDatas binary object.: \code{\link{saves_MSqRob}}
}
